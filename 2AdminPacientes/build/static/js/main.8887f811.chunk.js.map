{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","actualizarState","e","target","name","value","className","action","onSubmit","preventDefault","trim","id","uuidv4","htmlFor","type","placeholder","onChange","cols","rows","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAmJeA,EA/II,SAAC,GAAqB,IAAlBC,EAAiB,EAAjBA,UAGrB,EAA0BC,mBAAU,CAClCC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,KALZ,mBAAQC,EAAR,KAAcC,EAAd,KAQA,EAA4BP,oBAAU,GAAtC,mBAAQQ,EAAR,KAAeC,EAAf,KAGMC,EAAkB,SAAAC,GACtBJ,EAAQ,2BACHD,GADE,kBAEHK,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,UAKxBb,EAAgDK,EAAhDL,QAASC,EAAuCI,EAAvCJ,YAAaC,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,KAAMC,EAAaC,EAAbD,SAkC3C,OACE,eAAC,WAAD,WACE,4CAICG,EACC,mBAAGO,UAAU,eAAb,+CAIA,KAEF,uBACEC,OAAO,GACPC,SA9Ca,SAAAN,GACjBA,EAAEO,iBAGsB,KAAnBjB,EAAQkB,QAAwC,KAAvBjB,EAAYiB,QACpB,KAAjBhB,EAAMgB,QAAiC,KAAhBf,EAAKe,QAAqC,KAApBd,EAASc,QAM3DV,GAAU,GAGVH,EAAKc,GAAKC,cAGVtB,EAAWO,GAGXC,EAAS,CACPN,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,MAnBVI,GAAU,IAsCV,UAIE,uBAAOa,QAAQ,GAAf,4BACA,uBACEC,KAAK,OACLV,KAAK,UACLE,UAAU,eACVS,YAAY,iBACZC,SAAWf,EACXI,MAAQb,IAGV,uBAAOqB,QAAQ,GAAf,iCACA,uBACEC,KAAK,OACLV,KAAK,cACLE,UAAU,eACVS,YAAY,gCACZC,SAAWf,EACXI,MAAQZ,IAGV,uBAAOoB,QAAQ,GAAf,mBACA,uBACEC,KAAK,OACLV,KAAK,QACLE,UAAU,eACVU,SAAWf,EACXI,MAAQX,IAGV,uBAAOmB,QAAQ,GAAf,kBACA,uBACEC,KAAK,OACLV,KAAK,OACLE,UAAU,eACVU,SAAWf,EACXI,MAAQV,IAGV,uBAAOkB,QAAQ,GAAf,yBACA,0BACET,KAAK,WACLO,GAAG,GACHM,KAAK,KACLC,KAAK,KACLZ,UAAU,eACVU,SAAWf,EACXI,MAAQT,IAGV,wBACEkB,KAAK,SACLR,UAAU,8BAFZ,iCCpGOa,EAxBF,SAAC,GAAD,IAAItB,EAAJ,EAAIA,KAAMuB,EAAV,EAAUA,aAAV,OACX,sBAAKd,UAAU,OAAf,UACE,0CAAY,+BAAQT,EAAKL,aACzB,2CAAU,+BAAQK,EAAKJ,iBACvB,wCAAU,+BAAQI,EAAKH,WACvB,uCAAS,+BAAQG,EAAKF,UACtB,8CAAa,+BAAQE,EAAKD,cAE1B,wBACEU,UAAU,+BAEVe,QAAU,kBAAMD,EAAcvB,EAAKc,KAHrC,+BCuEWW,MA5Ef,WAKE,IAAIC,EAAiBC,KAAKC,MAAOC,aAAaC,QAAS,UAEjDJ,IAEJA,EAAiB,IAInB,MAA4BhC,mBAAUgC,GAAtC,mBAAQK,EAAR,KAAeC,EAAf,KAKAC,qBAAW,WAEJP,EAEHG,aAAaK,QAAS,QAASP,KAAKQ,UAAWJ,IAG/CF,aAAaK,QAAS,QAASP,KAAKQ,UAAW,OAGhD,CAAEJ,EAAOL,IAGZ,IAQMH,EAAe,SAAAT,GACnB,IAAMsB,EAAcL,EAAMM,QAAQ,SAAArC,GAAI,OAAIA,EAAKc,KAAOA,KACtDkB,EAAUI,IAMNE,EAA0B,IAAjBP,EAAMQ,OAAe,eAAiB,uBAErD,OACE,eAAC,WAAD,WACE,4DAEA,qBAAK9B,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,CACEhB,UA1BM,SAAAO,GAChBgC,EAAS,GAAD,mBACHD,GADG,CAEN/B,UA0BI,sBAAKS,UAAU,kBAAf,UACE,6BAAM6B,IACJP,EAAMS,KAAK,SAAAxC,GAAI,OACf,cAAC,EAAD,CAEEA,KAAOA,EACPuB,aAAeA,GAFTvB,EAAKc,mBChE3B2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAgB,W","file":"static/js/main.8887f811.chunk.js","sourcesContent":["import { Fragment, useState } from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ( { crearCita } ) => {\r\n\r\n  // Crear state de citas\r\n  const [ cita, setCita ] = useState( {\r\n    mascota: '',\r\n    propietario: '',\r\n    fecha: '',\r\n    hora: '',\r\n    sintomas: ''\r\n  } );\r\n\r\n  const [ error, setError ] = useState( false );\r\n\r\n  // Se ejecuta cada que el usuario escribe en un input\r\n  const actualizarState = e => {\r\n    setCita( {\r\n      ...cita,\r\n      [ e.target.name ]: e.target.value\r\n    } );\r\n  }\r\n\r\n  // Extraer los valores\r\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n  // Cuando el usuario presiona agregar cita\r\n  const submitCita = e => {\r\n    e.preventDefault();\r\n\r\n    // Validar\r\n    if ( mascota.trim() === '' || propietario.trim() === ''\r\n      || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '' ) {\r\n      setError( true );\r\n      return;\r\n    }\r\n\r\n    // Elminar el mensaje previo de error\r\n    setError( false );\r\n\r\n    // Asignar un ID\r\n    cita.id = uuidv4();\r\n\r\n    // Crear la cita\r\n    crearCita( cita );\r\n\r\n    // Reiniciar el form\r\n    setCita( {\r\n      mascota: '',\r\n      propietario: '',\r\n      fecha: '',\r\n      hora: '',\r\n      sintomas: ''\r\n    } );\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n\r\n      {/* Verifica si el error es true para mostrar el mensaje de error\r\n      al usuario, de lo contrario, no se muestra nada (null) */}\r\n      {error ?\r\n        <p className=\"alerta-error\">\r\n          Todos los campos son obligatorios\r\n        </p>\r\n        :\r\n        null }\r\n\r\n      <form\r\n        action=\"\"\r\n        onSubmit={ submitCita }\r\n      >\r\n        <label htmlFor=\"\">Nombre Mascota</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Mascota\"\r\n          onChange={ actualizarState }\r\n          value={ mascota }\r\n        />\r\n\r\n        <label htmlFor=\"\">Nombre del Dueño</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"propietario\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Dueño de la Mascota\"\r\n          onChange={ actualizarState }\r\n          value={ propietario }\r\n        />\r\n\r\n        <label htmlFor=\"\">Fecha</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"fecha\"\r\n          className=\"u-full-width\"\r\n          onChange={ actualizarState }\r\n          value={ fecha }\r\n        />\r\n\r\n        <label htmlFor=\"\">Hora</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"hora\"\r\n          className=\"u-full-width\"\r\n          onChange={ actualizarState }\r\n          value={ hora }\r\n        />\r\n\r\n        <label htmlFor=\"\">Síntomas</label>\r\n        <textarea\r\n          name=\"sintomas\"\r\n          id=\"\"\r\n          cols=\"30\"\r\n          rows=\"10\"\r\n          className=\"u-full-width\"\r\n          onChange={ actualizarState }\r\n          value={ sintomas }\r\n        ></textarea>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"u-full-width button-primary\"\r\n        >Agregar Cita</button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\n/**\r\n * ¬ propTypes\r\n * Sirve para documentar tus componentes, para cuando alguien más mantiene tu código\r\n * En este caso hacemos obligatorio crearCita\r\n * Se debe de importar al inicio del archivo:\r\n * ¬ import PropTypes from 'prop-types';\r\n */\r\nFormulario.propTypes = {\r\n  // Indica que la función crearCita es requerida en el componente Formulario.jsx\r\n  crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import PropTypes from 'prop-types';\r\n\r\nconst Cita = ( { cita, eliminarCita } ) => (\r\n  <div className=\"cita\">\r\n    <p>Mascota: <span>{ cita.mascota }</span></p>\r\n    <p>Dueño: <span>{ cita.propietario }</span></p>\r\n    <p>Fecha: <span>{ cita.fecha }</span></p>\r\n    <p>Hora: <span>{ cita.hora }</span></p>\r\n    <p>Síntomas: <span>{ cita.sintomas }</span></p>\r\n\r\n    <button\r\n      className=\"button eliminar u-full-width\"\r\n      // Se usa el arrow function para hacer que la función no se ejecute hasta que el botón sea presionado\r\n      onClick={ () => eliminarCita( cita.id ) }\r\n    >Eliminar &times;</button>\r\n  </div>\r\n);\r\n\r\n\r\nCita.propTypes = {\r\n  // Indica que el objeto cita es requerido en el componente Cita.jsx\r\n  cita: PropTypes.object.isRequired,\r\n  // Indica que la funcion eliminarCita es requerido en el componente Cita.jsx\r\n  eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import { Fragment, useState, useEffect } from \"react\";\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\n\nfunction App() {\n\n  // Citas en local storage\n  // ° Local Storage sólo almacena strings\n  // ° Se convierte a JSON para que se puede almacenar como solo string\n  let citasIniciales = JSON.parse( localStorage.getItem( 'citas' ) );\n  // Si no hay citas, se inicia como un arreglo vacío\n  if ( !citasIniciales ) {\n    // Este pasa a ser el valor inicial del state citas\n    citasIniciales = [];\n  }\n\n  // Arreglo de citas\n  const [ citas, setCitas ] = useState( citasIniciales );\n\n  // useEffect para realizar ciertas operaciones cuando el state cambia y está listo (se ejecuta)\n\n  // ° si no se coloca el arreglo como vacío, useEffect va a entrar en un ciclo sin fin\n  useEffect( () => {\n    // Acción a realizar en cada ejecución\n    if ( citasIniciales ) {\n      // Si hay citas, se guarda en el local storage, aplica también si hay cambios en el state citas\n      localStorage.setItem( 'citas', JSON.stringify( citas ) );\n    } else {\n      // Si no hay citas, se agrega un arreglo vacío\n      localStorage.setItem( 'citas', JSON.stringify( [] ) );\n    }\n    // En este caso, se ejecuta cada que el state de citas cambia\n  }, [ citas, citasIniciales ] );\n\n  // Leer nueva cita + citas ya hechas\n  const crearCita = cita => {\n    setCitas( [\n      ...citas,\n      cita\n    ] );\n  }\n\n  // Función que elimina una cita por su id\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter( cita => cita.id !== id );\n    setCitas( nuevasCitas );\n  }\n\n  // Mensaje condicional de citas\n  // Si no hay citas muestra el primer mensaje,\n  // de lo contrario, muestra el segundo\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1 >\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n              crearCita={ crearCita }\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{ titulo }</h2>\n            { citas.map( cita => (\n              <Cita\n                key={ cita.id }\n                cita={ cita }\n                eliminarCita={ eliminarCita }\n              />\n            ) ) }\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById( 'root' )\n);"],"sourceRoot":""}