{"version":3,"sources":["components/Error.jsx","hooks/useMoneda.jsx","hooks/useCriptomoneda.jsx","components/Formulario.jsx","components/Cotizacion.jsx","components/Spinner.jsx","cryptomonedas.png","App.js","index.js"],"names":["MensajeError","styled","p","Error","mensaje","Label","label","Select","select","useMoneda","stateInicial","opciones","useState","state","setState","htmlFor","onChange","e","target","value","defaultValue","hidden","map","opcion","codigo","nombre","useCriptomoneda","CoinInfo","Name","FullName","Id","Boton","input","Formulario","setMoneda","setCriptomoneda","listaCripto","setListaCripto","error","setError","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","Contenedor","Imagen","img","Heading","h1","App","setResultado","cargando","setCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","href","src","imagen","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAKMA,EAAeC,IAAOC,EAAV,kOAoBHC,EARD,SAAC,GAAmB,IAAhBC,EAAe,EAAfA,QAChB,OACE,cAACJ,EAAD,UACII,KCbFC,EAAQJ,IAAOK,MAAV,qMAULC,EAASN,IAAOO,OAAV,8KAkDGC,EApCG,SAAEH,EAAOI,EAAcC,GAGvC,MAA4BC,mBAAUF,GAAtC,mBAAQG,EAAR,KAAeC,EAAf,KA6BA,MAAO,CAAED,EAzBW,kBAClB,eAAC,WAAD,WACE,cAACR,EAAD,CAAOU,QAAQ,GAAf,SAAoBT,IACpB,eAACC,EAAD,CAEES,SAAW,SAAAC,GAAC,OAAIH,EAAUG,EAAEC,OAAOC,QACnCA,MAAQN,EAHV,UAKE,wBAAQO,cAAY,EAACC,QAAM,EAA3B,yCACEV,EAASW,KAAK,SAAAC,GAAM,OACpB,wBAEEJ,MAAQI,EAAOC,OAFjB,SAIGD,EAAOE,QAHFF,EAAOC,kBAcMV,ICxDzBT,EAAQJ,IAAOK,MAAV,qMAULC,EAASN,IAAOO,OAAV,8KA0DGkB,EA5CS,SAAEpB,EAAOI,EAAcC,GAK7C,MAA4BC,mBAAUF,GAAtC,mBAAQG,EAAR,KAAeC,EAAf,KAmCA,MAAO,CAAED,EA/BY,kBAEnB,eAAC,WAAD,WAEE,cAAC,EAAD,CAAOE,QAAQ,GAAf,SAAoBT,IAEpB,eAAC,EAAD,CAEEU,SAAW,SAAAC,GAAC,OAAIH,EAAUG,EAAEC,OAAOC,QACnCA,MAAQN,EAHV,UAME,wBAAQO,cAAY,EAACC,QAAM,EAA3B,yCAEEV,EAASW,KAAK,SAAAC,GAAM,OACpB,wBAEEJ,MAAQI,EAAOI,SAASC,KAF1B,SAIGL,EAAOI,SAASE,UAHXN,EAAOI,SAASG,cAeFhB,ICzD1BiB,EAAQ9B,IAAO+B,MAAV,wUAuGIC,EAnFI,SAAC,GAAsC,IAAnCC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,gBAGhC,EAAwCvB,mBAAU,IAAlD,mBAAQwB,EAAR,KAAqBC,EAArB,KAEA,EAA4BzB,oBAAU,GAAtC,mBAAQ0B,EAAR,KAAeC,EAAf,KAWA,EAAkC9B,EAAW,kBAAmB,GARhD,CACd,CAAEe,OAAQ,MAAOC,OAAQ,2BACzB,CAAED,OAAQ,MAAOC,OAAQ,iBACzB,CAAED,OAAQ,MAAOC,OAAQ,QACzB,CAAED,OAAQ,MAAOC,OAAQ,qBAI3B,mBAAQe,EAAR,KAAgBC,EAAhB,KAGA,EAAuCf,EAAiB,wBAAyB,GAAIU,GAArF,mBAAQM,EAAR,KAAsBC,EAAtB,KAGAC,qBAAW,YAES,uCAAG,4BAAAC,EAAA,4DACP,0EADO,SAGKC,IAAMC,IAFlB,2EADO,OAGbC,EAHa,OAMnBX,EAAgBW,EAAUC,KAAKC,MANZ,2CAAH,qDASlBC,KAEC,IAsBH,OACE,uBACEC,SArBkB,SAAAnC,GACpBA,EAAEoC,iBAGc,KAAXb,GAAkC,KAAjBE,GAOtBH,GAAU,GAEVL,EAAWM,GACXL,EAAiBO,IATfH,GAAU,IAeZ,UAKID,EACE,cAAC,EAAD,CACElC,QAAQ,sCAGV,KAGJ,cAACqC,EAAD,IAEA,cAACE,EAAD,IAEA,cAACZ,EAAD,CACEuB,KAAK,SACLnC,MAAM,iBC3GRoC,EAAetD,IAAOuD,IAAV,4FAMZC,EAAOxD,IAAOC,EAAV,wFAQJwD,EAASzD,IAAOC,EAAV,sFA0BGyD,EAlBI,SAAC,GAAqB,IAAlBX,EAAiB,EAAjBA,UAGrB,OAAyC,IAApCY,OAAOC,KAAMb,GAAYc,OACrB,KAIP,eAACP,EAAD,WACE,eAACG,EAAD,4BAAsB,+BAAQV,EAAUe,WACxC,eAACN,EAAD,gDAAkC,+BAAQT,EAAUgB,aACpD,eAACP,EAAD,gDAAkC,+BAAQT,EAAUiB,YACpD,eAACR,EAAD,gDAAkC,+BAAQT,EAAUkB,qBACpD,eAACT,EAAD,0CAA4B,+BAAQT,EAAUmB,oBCrBrCC,G,MAhBC,WACd,OACE,sBAAKC,UAAU,eAAf,UACE,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,0BCbN,MAA0B,0CCYnCC,EAAarE,IAAOuD,IAAV,qMAUVe,EAAStE,IAAOuE,IAAV,qEAKNC,EAAUxE,IAAOyE,GAAV,6TA0FEC,MAtEf,WAGE,MAA8B/D,mBAAU,IAAxC,mBAAQ4B,EAAR,KAAgBN,EAAhB,KACA,EAA0CtB,mBAAU,IAApD,mBAAQ8B,EAAR,KAAsBP,EAAtB,KAEA,EAAoCvB,mBAAU,IAA9C,mBAAQoC,EAAR,KAAmB4B,EAAnB,KAEA,EAAkChE,oBAAU,GAA5C,mBAAQiE,EAAR,KAAkBC,EAAlB,KAEAlC,qBAAW,YAGgB,uCAAG,8BAAAC,EAAA,yDAEV,KAAXL,EAFqB,wDAKpBuC,EALoB,sEAKkDrC,EALlD,kBAK0EF,GAL1E,SAOFM,IAAMC,IAAKgC,GAPT,OAOpB/B,EAPoB,OAU1B8B,GAAa,GAGbE,YAAY,WAGVF,GAAa,GAGbF,EAAc5B,EAAUC,KAAKgC,QAASvC,GAAgBF,MACrD,KApBuB,2CAAH,qDAuBzB0C,KAEC,CAAE1C,EAAQE,IAIb,IAAMyC,EAAeN,EAAa,cAAC,EAAD,IAAc,cAAC,EAAD,CAAY7B,UAAYA,IAExE,OACE,eAACsB,EAAD,WACE,8BAEE,mBAAGc,KAAK,aAAR,SACE,cAACb,EAAD,CACEc,IAAMC,EACNC,IAAI,uBAIV,gCACE,cAACd,EAAD,+CAEA,cAAC,EAAD,CACEvC,UAAYA,EACZC,gBAAkBA,IAGlBgD,SCzGVK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAgB,W","file":"static/js/main.118ba2d1.chunk.js","sourcesContent":["// Estilos (Emotion)\r\nimport styled from \"@emotion/styled\";\r\n\r\n// ¿ ----- Styled Components --------------\r\n\r\nconst MensajeError = styled.p`\r\n  background-color: #b7322c;\r\n  padding: 1rem;\r\n  color: #FFF;\r\n  font-size: 30px;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\n// ¿ -------- React Component -----------\r\nconst Error = ( { mensaje } ) => {\r\n  return (\r\n    <MensajeError>\r\n      { mensaje }\r\n    </MensajeError>\r\n  );\r\n}\r\n\r\nexport default Error;","// Dependencies\r\nimport { Fragment, useState } from \"react\";\r\n// Estilos (Emotion)\r\nimport styled from \"@emotion/styled\";\r\n\r\n// ¿ ----- Styled Components --------------\r\n\r\nconst Label = styled.label`\r\n  font-family: 'Bebas Neue', cursive;\r\n  color: #FFF;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 2.4rem;\r\n  margin-top: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  --webkit-appearance: none;\r\n  border-radius: 10px;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\n\r\n// ¿ -------- Custom Hook -----------\r\n// Un hook es como una función\r\n// Este hook va a ser un select con algunas funciones y states en su interior\r\nconst useMoneda = ( label, stateInicial, opciones ) => {\r\n\r\n  // State de nuestro Hook\r\n  const [ state, setState ] = useState( stateInicial );\r\n\r\n  // Función que va a retornar un select y un label\r\n  // Se tiene el return implícito: ()\r\n  const Seleccionar = () => (\r\n    <Fragment>\r\n      <Label htmlFor=\"\">{ label }</Label>\r\n      <Select\r\n        // Cambia el state de acuerdo a la moneda seleccionada (MXN o USD) por ejemplo\r\n        onChange={ e => setState( e.target.value ) }\r\n        value={ state }\r\n      >\r\n        <option defaultValue hidden>-- Seleccione una Moneda --</option>\r\n        { opciones.map( opcion => (\r\n          <option\r\n            key={ opcion.codigo }\r\n            value={ opcion.codigo }\r\n\r\n          >{ opcion.nombre }\r\n          </option>\r\n        ) ) }\r\n      </Select>\r\n\r\n    </Fragment>\r\n  );\r\n\r\n  // Retornar state, interfaz y función que modifica el state\r\n  // ° Se puede retornar en cualquier orden\r\n  // ° Sólo no hay que olvidar ese orden para los llamados y asignar el nombre correcto a las variables\r\n  return [ state, Seleccionar, setState ];\r\n\r\n}\r\n\r\nexport default useMoneda;","// Dependencies\r\nimport { Fragment, useState } from \"react\";\r\n// Estilos (Emotion)\r\nimport styled from \"@emotion/styled\";\r\n\r\n// ¿ ----- Styled Components --------------\r\n\r\nconst Label = styled.label`\r\n  font-family: 'Bebas Neue', cursive;\r\n  color: #FFF;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 2.4rem;\r\n  margin-top: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  --webkit-appearance: none;\r\n  border-radius: 10px;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\n\r\n// ¿ -------- Custom Hook -----------\r\n// Un hook es como una función\r\n// Este hook va a ser un select con algunas funciones y states en su interior\r\nconst useCriptomoneda = ( label, stateInicial, opciones ) => {\r\n\r\n  // console.log( opciones );\r\n\r\n  // State de nuestro Hook\r\n  const [ state, setState ] = useState( stateInicial );\r\n\r\n  // Función que va a retornar un select y un label\r\n  // Se tiene el return implícito: ()\r\n  const SelectCripto = () => (\r\n\r\n    <Fragment>\r\n\r\n      <Label htmlFor=\"\">{ label }</Label>\r\n\r\n      <Select\r\n        // Cambia el state de acuerdo a la moneda seleccionada (MXN o USD) por ejemplo\r\n        onChange={ e => setState( e.target.value ) }\r\n        value={ state }\r\n      >\r\n\r\n        <option defaultValue hidden>-- Seleccione una Moneda --</option>\r\n\r\n        { opciones.map( opcion => (\r\n          <option\r\n            key={ opcion.CoinInfo.Id }\r\n            value={ opcion.CoinInfo.Name }\r\n\r\n          >{ opcion.CoinInfo.FullName }\r\n          </option>\r\n        ) ) }\r\n\r\n      </Select>\r\n\r\n    </Fragment>\r\n  );\r\n\r\n  // Retornar state, interfaz y función que modifica el state\r\n  // ° Se puede retornar en cualquier orden\r\n  // ° Sólo no hay que olvidar ese orden para los llamados y asignar el nombre correcto a las variables\r\n  return [ state, SelectCripto, setState ];\r\n\r\n}\r\n\r\nexport default useCriptomoneda;","// Dependencies\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n// Components\r\nimport Error from \"./Error\";\r\n// Estilos (Emotion)\r\nimport styled from \"@emotion/styled\";\r\n// Custom Hooks\r\nimport useMoneda from \"../hooks/useMoneda\";\r\nimport useCriptomoneda from \"../hooks/useCriptomoneda\";\r\n\r\n\r\n\r\n// ¿ ----- Styled Components --------------\r\nconst Boton = styled.input`\r\n  margin-top: 20px;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n  background-color: #66a2fe;\r\n  border: none;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  color: #FFF;\r\n  transition: background-color 0.3s ease;\r\n\r\n  &:hover{\r\n    background-color: #326ac0;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\n\r\n// ¿ -------- React Component -----------\r\nconst Formulario = ( { setMoneda, setCriptomoneda } ) => {\r\n\r\n  // State del listado de criptomonedas\r\n  const [ listaCripto, setListaCripto ] = useState( [] );\r\n  // State para la Validación\r\n  const [ error, setError ] = useState( false );\r\n\r\n  // Arreglo de monedas\r\n  const MONEDAS = [\r\n    { codigo: 'USD', nombre: 'Dolar de Estados Unidos' },\r\n    { codigo: 'MXN', nombre: 'Peso Mexicano' },\r\n    { codigo: 'EUR', nombre: 'Euro' },\r\n    { codigo: 'GBP', nombre: 'Libra Esterlina' }\r\n  ]\r\n\r\n  // Utilizar useMoneda() <- se escribe como una función cuando es un array destructuring\r\n  const [ moneda, SelectMonedas ] = useMoneda( 'Elige tu moneda', '', MONEDAS );\r\n\r\n  // Utilizar useCriptomoneda\r\n  const [ criptomoneda, SelectCripto ] = useCriptomoneda( 'Elige tu Criptomoneda', '', listaCripto );\r\n\r\n  // Ejecutar llamado a la API\r\n  useEffect( () => {\r\n\r\n    const consultarAPI = async () => {\r\n      const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\r\n\r\n      const resultado = await axios.get( url );\r\n\r\n      // Una vez obtenidos los resultados, lo guardamos en el State\r\n      setListaCripto( resultado.data.Data );\r\n    }\r\n\r\n    consultarAPI();\r\n\r\n  }, [] );\r\n\r\n  // Cuando el usuario hace Submit\r\n  const cotizarMoneda = e => {\r\n    e.preventDefault();\r\n\r\n    // Si ambos campos están llenos\r\n    if ( moneda === '' || criptomoneda === '' ) {\r\n      setError( true );\r\n      return;\r\n    }\r\n\r\n    // De lo contrario, pasar los datos al componente principal\r\n    // Esto es para poder pasar los datos a otro componente\r\n    setError( false );\r\n    // Se envían los datos de los hooks a App.js (componente principal)\r\n    setMoneda( moneda );\r\n    setCriptomoneda( criptomoneda );\r\n\r\n\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={ cotizarMoneda }\r\n    >\r\n\r\n      {\r\n        error ?\r\n          <Error\r\n            mensaje='Todos los campos son obligatorios'\r\n          />\r\n          :\r\n          null\r\n      }\r\n\r\n      <SelectMonedas />\r\n\r\n      <SelectCripto />\r\n\r\n      <Boton\r\n        type=\"submit\"\r\n        value=\"Calcular\"\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Formulario;","// Estilos (Emotion)\r\nimport styled from \"@emotion/styled\";\r\n\r\n// ¿ ----- Styled Components --------------\r\nconst ResultadoDiv = styled.div`\r\n  color: #FFF;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n\r\n`;\r\n\r\nconst Info = styled.p`\r\n  font-size: 18px;\r\n\r\n  span{\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst Precio = styled.p`\r\n  font-size: 30px;\r\n  span{\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\n// ¿ -------- React Component -----------\r\nconst Cotizacion = ( { resultado } ) => {\r\n\r\n  // Si el objeto llega vació no se ejecuta nada\r\n  if ( Object.keys( resultado ).length === 0 ) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ResultadoDiv>\r\n      <Precio>El precio es: <span>{ resultado.PRICE }</span></Precio>\r\n      <Info>El precio más alto del día: <span>{ resultado.HIGHDAY }</span></Info>\r\n      <Info>El precio más bajo del día: <span>{ resultado.LOWDAY }</span></Info>\r\n      <Info>Variación últimas 24 horas: <span>{ resultado.CHANGEPCT24HOUR }</span></Info>\r\n      <Info>Última actualización: <span>{ resultado.LASTUPDATE }</span></Info>\r\n    </ResultadoDiv>\r\n  );\r\n}\r\n\r\nexport default Cotizacion;","import './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"sk-cube-grid\">\r\n      <div className=\"sk-cube sk-cube1\"></div>\r\n      <div className=\"sk-cube sk-cube2\"></div>\r\n      <div className=\"sk-cube sk-cube3\"></div>\r\n      <div className=\"sk-cube sk-cube4\"></div>\r\n      <div className=\"sk-cube sk-cube5\"></div>\r\n      <div className=\"sk-cube sk-cube6\"></div>\r\n      <div className=\"sk-cube sk-cube7\"></div>\r\n      <div className=\"sk-cube sk-cube8\"></div>\r\n      <div className=\"sk-cube sk-cube9\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/cryptomonedas.51f1d2ed.png\";","// Dependencies\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n// Components\nimport Formulario from \"./components/Formulario\";\nimport Cotizacion from \"./components/Cotizacion\";\nimport Spinner from \"./components/Spinner\";\n// Estilos (Emotion)\nimport styled from \"@emotion/styled\";\nimport imagen from './cryptomonedas.png';\n\n// ¿ ----- Styled Components --------------\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n      display:grid;\n      grid-template-columns: repeat(2, 1fr);\n      column-gap: 2 rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #FFF;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &:after{\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\n\n// ¿ -------- React Component -----------\nfunction App() {\n\n  // States para almacenar los datos de los hooks\n  const [ moneda, setMoneda ] = useState( '' );\n  const [ criptomoneda, setCriptomoneda ] = useState( '' );\n  // State con el resultado de la cotización\n  const [ resultado, setResultado ] = useState( {} );\n  // State del spinner\n  const [ cargando, setCargando ] = useState( false );\n\n  useEffect( () => {\n\n    // Se recomienda que siempre esté todo dentro de una función\n    const cotizarCriptomoneda = async () => {\n      // Evitar la primera ejecución\n      if ( moneda === '' ) return;\n\n      // Segunda consulta a la API para obtener la cotización\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${ criptomoneda }&tsyms=${ moneda }`;\n\n      const resultado = await axios.get( url );\n\n      // ° Llamado al spinner\n      setCargando( true );\n\n      // ° Ocultar el spinner y mostrar el resultado\n      setTimeout( () => {\n\n        // ° Ocultar el Spinner\n        setCargando( false );\n\n        // Para acceder de manera dinámica a la respuesta de la API\n        setResultado( resultado.data.DISPLAY[ criptomoneda ][ moneda ] );\n      }, 3000 );\n    }\n\n    cotizarCriptomoneda();\n\n  }, [ moneda, criptomoneda ] );\n\n  // Mostrar Spinner o Resultado\n  // Si cargando está como true, se muestra el spinner, si no, se muestra la cotización\n  const componente = ( cargando ) ? <Spinner /> : <Cotizacion resultado={ resultado } />;\n\n  return (\n    <Contenedor>\n      <div>\n\n        <a href=\"index.html\">\n          <Imagen\n            src={ imagen }\n            alt=\"Imagen Criptos\"\n          />\n        </a>\n      </div>\n      <div>\n        <Heading>Cotiza Criptomonedas al Instante</Heading>\n\n        <Formulario\n          setMoneda={ setMoneda }\n          setCriptomoneda={ setCriptomoneda }\n        />\n\n        { componente }\n\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById( 'root' )\n);"],"sourceRoot":""}