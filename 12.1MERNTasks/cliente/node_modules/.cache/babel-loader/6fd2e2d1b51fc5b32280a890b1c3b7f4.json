{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\12MERNTasks\\\\cliente\\\\src\\\\context\\\\proyectos\\\\ProyectoState.jsx\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport { nanoid } from 'nanoid';\nimport ProyectoContext from \"./ProyectoContext\";\nimport ProyectoReducer from \"./ProyectoReducer\";\nimport { FORMULARIO_PROYECTO, OBTENER_PROYECTOS, AGREGAR_PROYECTO } from \"../../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProyectoState = props => {\n  _s();\n\n  const proyectos = [{\n    id: 1,\n    nombre: 'Tienda Virtual'\n  }, {\n    id: 2,\n    nombre: 'Intranet'\n  }, {\n    id: 3,\n    nombre: 'Diseño de sitio web'\n  }, {\n    id: 4,\n    nombre: 'MERN'\n  }];\n  const initialState = {\n    proyectos: [],\n    formulario: false\n  }; // Dispatch para ejecutar las acciones\n\n  const [state, dispatch] = useReducer(ProyectoReducer, initialState); // Serie de funcionas para el CRUD\n\n  const mostrarFormulario = () => {\n    dispatch({\n      type: FORMULARIO_PROYECTO\n    });\n  }; // Obtener los proyectos\n\n\n  const obtenerProyectos = () => {\n    dispatch({\n      type: OBTENER_PROYECTOS,\n      // El payload es lo que toma la función como parámetro\n      payload: proyectos\n    });\n  }; // Agregar nuevo proyecto\n\n\n  const agregarProyecto = proyecto => {\n    proyecto.id = uuidv4(); // Insertar el proyecto en el state\n\n    dispatch({\n      type: AGREGAR_PROYECTO,\n      payload: proyecto\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProyectoContext.Provider, {\n    value: {\n      proyectos: state.proyectos,\n      formulario: state.formulario,\n      mostrarFormulario,\n      obtenerProyectos,\n      agregarProyecto\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProyectoState, \"h4meAN672mISt93ielJXXMKemns=\");\n\n_c = ProyectoState;\nexport default ProyectoState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProyectoState\");","map":{"version":3,"sources":["C:/React/12MERNTasks/cliente/src/context/proyectos/ProyectoState.jsx"],"names":["useReducer","nanoid","ProyectoContext","ProyectoReducer","FORMULARIO_PROYECTO","OBTENER_PROYECTOS","AGREGAR_PROYECTO","ProyectoState","props","proyectos","id","nombre","initialState","formulario","state","dispatch","mostrarFormulario","type","obtenerProyectos","payload","agregarProyecto","proyecto","uuidv4","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SACEC,mBADF,EAEEC,iBAFF,EAGEC,gBAHF,QAIO,aAJP;;;AAMA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAE7B,QAAMC,SAAS,GAAG,CAChB;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,MAAM,EAAE;AAAjB,GADgB,EAEhB;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,MAAM,EAAE;AAAjB,GAFgB,EAGhB;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,MAAM,EAAE;AAAjB,GAHgB,EAIhB;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,MAAM,EAAE;AAAjB,GAJgB,CAAlB;AAOA,QAAMC,YAAY,GAAG;AACnBH,IAAAA,SAAS,EAAE,EADQ;AAEnBI,IAAAA,UAAU,EAAE;AAFO,GAArB,CAT6B,CAc7B;;AACA,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBf,UAAU,CAAEG,eAAF,EAAmBS,YAAnB,CAAtC,CAf6B,CAiB7B;;AAEA,QAAMI,iBAAiB,GAAG,MAAM;AAC9BD,IAAAA,QAAQ,CAAE;AACRE,MAAAA,IAAI,EAAEb;AADE,KAAF,CAAR;AAGD,GAJD,CAnB6B,CAyB7B;;;AACA,QAAMc,gBAAgB,GAAG,MAAM;AAC7BH,IAAAA,QAAQ,CAAE;AACRE,MAAAA,IAAI,EAAEZ,iBADE;AAER;AACAc,MAAAA,OAAO,EAAEV;AAHD,KAAF,CAAR;AAKD,GAND,CA1B6B,CAkC7B;;;AACA,QAAMW,eAAe,GAAGC,QAAQ,IAAI;AAClCA,IAAAA,QAAQ,CAACX,EAAT,GAAcY,MAAM,EAApB,CADkC,CAGlC;;AACAP,IAAAA,QAAQ,CAAE;AACRE,MAAAA,IAAI,EAAEX,gBADE;AAERa,MAAAA,OAAO,EAAEE;AAFD,KAAF,CAAR;AAID,GARD;;AAWA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAG;AACNZ,MAAAA,SAAS,EAAEK,KAAK,CAACL,SADX;AAENI,MAAAA,UAAU,EAAEC,KAAK,CAACD,UAFZ;AAGNG,MAAAA,iBAHM;AAINE,MAAAA,gBAJM;AAKNE,MAAAA;AALM,KADV;AAAA,cASIZ,KAAK,CAACe;AATV;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA3DD;;GAAMhB,a;;KAAAA,a;AA6DN,eAAeA,aAAf","sourcesContent":["import { useReducer } from \"react\";\r\nimport { nanoid } from 'nanoid';\r\nimport ProyectoContext from \"./ProyectoContext\";\r\nimport ProyectoReducer from \"./ProyectoReducer\";\r\nimport {\r\n  FORMULARIO_PROYECTO,\r\n  OBTENER_PROYECTOS,\r\n  AGREGAR_PROYECTO\r\n} from \"../../types\";\r\n\r\nconst ProyectoState = props => {\r\n\r\n  const proyectos = [\r\n    { id: 1, nombre: 'Tienda Virtual' },\r\n    { id: 2, nombre: 'Intranet' },\r\n    { id: 3, nombre: 'Diseño de sitio web' },\r\n    { id: 4, nombre: 'MERN' }\r\n  ];\r\n\r\n  const initialState = {\r\n    proyectos: [],\r\n    formulario: false\r\n  }\r\n\r\n  // Dispatch para ejecutar las acciones\r\n  const [ state, dispatch ] = useReducer( ProyectoReducer, initialState );\r\n\r\n  // Serie de funcionas para el CRUD\r\n\r\n  const mostrarFormulario = () => {\r\n    dispatch( {\r\n      type: FORMULARIO_PROYECTO\r\n    } );\r\n  }\r\n\r\n  // Obtener los proyectos\r\n  const obtenerProyectos = () => {\r\n    dispatch( {\r\n      type: OBTENER_PROYECTOS,\r\n      // El payload es lo que toma la función como parámetro\r\n      payload: proyectos\r\n    } );\r\n  }\r\n\r\n  // Agregar nuevo proyecto\r\n  const agregarProyecto = proyecto => {\r\n    proyecto.id = uuidv4();\r\n\r\n    // Insertar el proyecto en el state\r\n    dispatch( {\r\n      type: AGREGAR_PROYECTO,\r\n      payload: proyecto\r\n    } )\r\n  }\r\n\r\n\r\n  return (\r\n    <ProyectoContext.Provider\r\n      value={ {\r\n        proyectos: state.proyectos,\r\n        formulario: state.formulario,\r\n        mostrarFormulario,\r\n        obtenerProyectos,\r\n        agregarProyecto\r\n      } }\r\n    >\r\n      { props.children }\r\n    </ProyectoContext.Provider>\r\n  )\r\n}\r\n\r\nexport default ProyectoState;"]},"metadata":{},"sourceType":"module"}