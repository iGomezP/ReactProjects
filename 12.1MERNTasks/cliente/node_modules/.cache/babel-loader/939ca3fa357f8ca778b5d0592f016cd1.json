{"ast":null,"code":"var _jsxFileName = \"/home/vakaz/Documentos/React/12MERNTasks/cliente/src/context/tareas/TareaState.jsx\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport TareaContext from \"./TareaContext\";\nimport TareaReducer from \"./TareaReducer\";\nimport { nanoid } from 'nanoid';\nimport { TAREAS_PROYECTO, AGREGAR_TAREA, VALIDAR_TAREA, ELIMINAR_TAREA, ESTADO_TAREA, TAREA_ACTUAL, ACTUALIZAR_TAREA, LIMPIAR_TAREA } from \"../../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TareaState = props => {\n  _s();\n\n  const initialState = {\n    tareasProyecto: null,\n    errorTarea: false,\n    tareaSeleccionada: null\n  }; // Crear dispatch y state\n\n  const [state, dispatch] = useReducer(TareaReducer, initialState); // Crear las funciones\n  // Obtener las tareas de un proyecto\n\n  const obtenerTareas = proyectoId => {\n    dispatch({\n      type: TAREAS_PROYECTO,\n      payload: proyectoId\n    });\n  }; // Agregar una tarea al proyecto seleccionado\n\n\n  const agregarTarea = tarea => {\n    tarea.id = nanoid(4);\n    dispatch({\n      type: AGREGAR_TAREA,\n      payload: tarea\n    });\n  }; // Valida y muestra un error en caso de que sea necesario\n\n\n  const validarTarea = () => {\n    dispatch({\n      type: VALIDAR_TAREA\n    });\n  }; // Eliminar tarea por id\n\n\n  const eliminarTarea = id => {\n    dispatch({\n      type: ELIMINAR_TAREA,\n      payload: id\n    });\n  }; // Cambia el estado de cada tarea\n\n\n  const cambiarEstadoTarea = tarea => {\n    dispatch({\n      type: ESTADO_TAREA,\n      payload: tarea\n    });\n  }; // Extrae la tarea para edición\n\n\n  const guardarTareaActual = tarea => {\n    dispatch({\n      type: TAREA_ACTUAL,\n      payload: tarea\n    });\n  }; // Edita o modifica una tarea\n\n\n  const actualizarTarea = tarea => {\n    dispatch({\n      type: ACTUALIZAR_TAREA,\n      payload: tarea\n    });\n  }; // Elimina la tarea seleccionada\n\n\n  const limpiarTarea = () => {\n    dispatch({\n      type: LIMPIAR_TAREA\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(TareaContext.Provider, {\n    value: {\n      // ¿ States\n      tareasProyecto: state.tareasProyecto,\n      errorTarea: state.errorTarea,\n      tareaSeleccionada: state.tareaSeleccionada,\n      // ¿ Funciones\n      obtenerTareas,\n      agregarTarea,\n      validarTarea,\n      eliminarTarea,\n      cambiarEstadoTarea,\n      guardarTareaActual,\n      actualizarTarea,\n      limpiarTarea\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TareaState, \"h4meAN672mISt93ielJXXMKemns=\");\n\n_c = TareaState;\nexport default TareaState;\n\nvar _c;\n\n$RefreshReg$(_c, \"TareaState\");","map":{"version":3,"sources":["/home/vakaz/Documentos/React/12MERNTasks/cliente/src/context/tareas/TareaState.jsx"],"names":["useReducer","TareaContext","TareaReducer","nanoid","TAREAS_PROYECTO","AGREGAR_TAREA","VALIDAR_TAREA","ELIMINAR_TAREA","ESTADO_TAREA","TAREA_ACTUAL","ACTUALIZAR_TAREA","LIMPIAR_TAREA","TareaState","props","initialState","tareasProyecto","errorTarea","tareaSeleccionada","state","dispatch","obtenerTareas","proyectoId","type","payload","agregarTarea","tarea","id","validarTarea","eliminarTarea","cambiarEstadoTarea","guardarTareaActual","actualizarTarea","limpiarTarea","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\nimport TareaContext from \"./TareaContext\";\nimport TareaReducer from \"./TareaReducer\";\nimport { nanoid } from 'nanoid';\nimport {\n  TAREAS_PROYECTO,\n  AGREGAR_TAREA,\n  VALIDAR_TAREA,\n  ELIMINAR_TAREA,\n  ESTADO_TAREA,\n  TAREA_ACTUAL,\n  ACTUALIZAR_TAREA,\n  LIMPIAR_TAREA\n\n} from \"../../types\";\n\nconst TareaState = props => {\n  const initialState = {\n    tareasProyecto: null,\n    errorTarea: false,\n    tareaSeleccionada: null\n  }\n\n  // Crear dispatch y state\n  const [ state, dispatch ] = useReducer( TareaReducer, initialState );\n\n  // Crear las funciones\n\n\n  // Obtener las tareas de un proyecto\n  const obtenerTareas = proyectoId => {\n    dispatch( {\n      type: TAREAS_PROYECTO,\n      payload: proyectoId\n    } )\n  }\n\n  // Agregar una tarea al proyecto seleccionado\n  const agregarTarea = tarea => {\n    tarea.id = nanoid( 4 );\n    dispatch( {\n      type: AGREGAR_TAREA,\n      payload: tarea\n    } )\n  }\n\n  // Valida y muestra un error en caso de que sea necesario\n  const validarTarea = () => {\n    dispatch( {\n      type: VALIDAR_TAREA\n    } )\n  }\n\n  // Eliminar tarea por id\n  const eliminarTarea = id => {\n    dispatch( {\n      type: ELIMINAR_TAREA,\n      payload: id\n    } )\n  }\n\n  // Cambia el estado de cada tarea\n  const cambiarEstadoTarea = tarea => {\n    dispatch( {\n      type: ESTADO_TAREA,\n      payload: tarea\n    } )\n  }\n\n  // Extrae la tarea para edición\n  const guardarTareaActual = tarea => {\n    dispatch( {\n      type: TAREA_ACTUAL,\n      payload: tarea\n    } )\n  }\n\n  // Edita o modifica una tarea\n  const actualizarTarea = tarea => {\n    dispatch( {\n      type: ACTUALIZAR_TAREA,\n      payload: tarea\n    } )\n  }\n\n  // Elimina la tarea seleccionada\n  const limpiarTarea = () => {\n    dispatch( {\n      type: LIMPIAR_TAREA\n    } )\n  }\n\n  return (\n    <TareaContext.Provider\n      value={ {\n        // ¿ States\n        tareasProyecto: state.tareasProyecto,\n        errorTarea: state.errorTarea,\n        tareaSeleccionada: state.tareaSeleccionada,\n\n        // ¿ Funciones\n        obtenerTareas,\n        agregarTarea,\n        validarTarea,\n        eliminarTarea,\n        cambiarEstadoTarea,\n        guardarTareaActual,\n        actualizarTarea,\n        limpiarTarea\n\n      } }\n    >\n      { props.children }\n    </TareaContext.Provider>\n  )\n\n}\n\nexport default TareaState;"]},"metadata":{},"sourceType":"module"}